fastlane_version '2.121.1'
default_platform(:ios)

platform :ios do
  before_all do
    setup_circle_ci
  end

  desc 'Run bundle exec pod install --repo-update'
  lane :pods do
    cocoapods(podfile: '.', repo_update: false)
  end

  desc 'Run CouchTrackerCore tests'
  lane :tests do
    pods
    scan(workspace: 'CouchTracker.xcworkspace',
         scheme: 'CouchTrackerCore',
         clean: false,
         code_coverage: true,
         output_directory: './reports/')
  end

  desc 'Run tests and linters'
  lane :lint do
    tests
    slather(cobertura_xml: true,
            travis: true,
            scheme: 'CouchTrackerCore',
            output_directory: './reports',
            verbose: true,
            proj: 'CouchTracker.xcodeproj',
            workspace: 'CouchTracker.xcworkspace')
    swiftlint(output_file: './reports/swiftlint.txt', ignore_exit_status: true)
  end

  desc 'Run tests and linters then upload metrics to sonar'
  lane :upload_sonar do
    lint
    sonar(sonar_login: ENV['SONAR_LOGIN'])
  end

  desc 'Release a new build'
  lane :beta do
    if is_building_ci_commit
      UI.important 'Skipping build since the CI commited'
      next
    end

    setup_git_on_ci

    pods

    changelog = get_changelog_as_markdown
    test_flight_changelog = get_changelog_clean

    bump_build_number

    version_number = get_version_number(target: 'CouchTracker')
    new_build_number = get_build_number

    commit_new_build_number_and_changelog(
      build_number: new_build_number,
      version_number: version_number,
      changelog: changelog
    )

    match(type: 'appstore')

    sh('../scripts/generate_secrets', log: false)

    build_ios_app(
      workspace: 'CouchTracker.xcworkspace',
      scheme: 'CouchTracker',
      configuration: 'Release',
      export_method: 'app-store'
    )

    upload_symbols_to_bugsnag

    upload_to_testflight(
      changelog: test_flight_changelog,
      skip_waiting_for_build_processing: false
    )

    publish_to_github(
      build_number: new_build_number,
      version_number: version_number,
      changelog: changelog
    )
  end

  private_lane :is_building_ci_commit do
    has_message = sh('git log --oneline -1', log: false).include? 'Bump build'

    changelog_changed = sh(
      "git tag --sort=version:refname | tail -n 2 | xargs -L1 bash -c 'git diff --name-only $0..$1' | xargs | grep 'changelog.md'",
      log: false,
      error_callback: ->(_) {}
    ).include? 'changelog.md'

    has_message && changelog_changed
  end

  private_lane :get_changelog_as_markdown do
    link_to_commit = 'http://github.com/pietrocaselani/CouchTracker/commit/%H'
    log_format = "* %s [view commit](#{link_to_commit})"
    get_changelog_with_format(log_format: log_format)
  end

  private_lane :get_changelog_clean do
    get_changelog_with_format(log_format: '* %s')
  end

  private_lane :get_changelog_with_format do |options|
    log_format = options[:log_format]
    tag = sh('git describe --tags --abbrev=0', log: false).chomp
    `git log #{tag}...HEAD --no-merges --pretty=format:"#{log_format}"`.chomp ||= ''
  end

  private_lane :bump_build_number do |_options|
    version = get_version_number(target: 'CouchTracker')
    lastest_build = latest_testflight_build_number(version: version)
    new_build_number = lastest_build + 1
    increment_build_number(build_number: new_build_number)
  end

  private_lane :commit_new_build_number_and_changelog do |options|
    new_build_number = options[:build_number]
    changelog = options[:changelog]

    full_version_name = "#{options[:version_number]} (#{new_build_number})"
    tag_name = "#{options[:version_number]}-#{new_build_number}"

    update_changelog_file(
      version_name: full_version_name,
      changelog: changelog
    )

    commit_version_bump(
      message: "Bump build #{new_build_number}",
      xcodeproj: './CouchTracker.xcodeproj',
      include: './changelog.md',
      force: true
    )

    add_git_tag(tag: tag_name.to_s)
  end

  private_lane :publish_to_github do |options|
    changelog = options[:changelog]
    new_build_number = options[:build_number]
    full_version_name = "#{options[:version_number]} (#{new_build_number})"
    tag_name = "#{options[:version_number]}-#{new_build_number}"

    push_to_github

    create_github_release(
      name: full_version_name.to_s,
      tag_name: tag_name.to_s,
      description: changelog
    )
  end

  private_lane :update_changelog_file do |options|
    version_name = options[:version_name]
    changelog = options[:changelog]

    current_changelog = File.read('../changelog.md')

    new_changelog = "# #{version_name} \n#{changelog}\n\n" + current_changelog

    File.write('../changelog.md', new_changelog)
  end

  private_lane :setup_git_on_ci do
    `git remote add github https://pietrocaselani:$GITHUB_TOKEN@github.com/pietrocaselani/CouchTracker.git`
    `git checkout master`
  end

  private_lane :push_to_github do
    push_to_git_remote(
      remote: 'github',
      local_branch: 'master',
      remote_branch: 'master',
      tags: false,
      force: true
    )
  end

  private_lane :create_github_release do |options|
    set_github_release(
      api_token: ENV['GITHUB_TOKEN'],
      repository_name: 'pietrocaselani/CouchTracker',
      name: options[:name],
      tag_name: options[:tag_name],
      description: options[:description],
      commitish: 'master'
    )
  end
end
