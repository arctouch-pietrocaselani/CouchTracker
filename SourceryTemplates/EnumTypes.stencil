{% macro associatedValueNamedType associatedValue %}{% if associatedValue.localName %}{{ associatedValue.localName }}{% else %}value{{ forloop.counter }}{% endif %}{% endmacro %}

{% macro associatedValueTypes associatedValues %}{% for associatedValue in associatedValues %}{% if forloop.first %}{{ associatedValue.typeName }}{% else %}, {{ associatedValue.typeName }}{% endif %}{% endfor %}{% endmacro %}
{% macro associatedValueNames associatedValues %}{% for associatedValue in case.associatedValues %}{% if forloop.first %}{% call associatedValueNamedType associatedValue %}{% else %}, {% call associatedValueNamedType associatedValue %}{% endif %}{% endfor %}{% endmacro %}

{% macro associatedTypeAsTuple associatedValues %}
{% if associatedValues.count == 1 %}
    {{ associatedValue.typeName }}
{% else %}
    {% for associatedValue in associatedValues %}
        {% if forloop.first %}
            {% call associatedValueNamedType associatedValue %}: {{ associatedValue.typeName }}
        {% else %}
            , {% call associatedValueNamedType associatedValue %}: {{ associatedValue.typeName }}
        {% endif %}
    {% endfor %}
{% endif %}
{% endmacro %}

// MARK: - EnumClosures

{% for enum in types.enums where enum.implements.EnumClosures %}
extension {{ enum.name }} {
    {% for case in enum.cases %}
    {% if case.hasAssociatedValue %}
    // Case: {{ case.name }} ({% call associatedTypeAsTuple case.associatedValues %})?
    {% endif %}
    {% endfor %}
}
{% endfor %}
